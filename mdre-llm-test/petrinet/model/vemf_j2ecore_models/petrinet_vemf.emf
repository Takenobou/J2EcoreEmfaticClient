@namespace(uri="https://www.example.org/java", prefix="java")
package javaPackage;

class PetrinetPackageImpl {
	op EObject init();
	op EObject getPetrinet();
	op EObject getPetrinet_Name();
	op EObject getPetrinet_Nodes();
	op EObject getPetrinet_Arcs();
	op EObject getNode();
	op EObject getNode_Name();
	op EObject getNode_In();
	op EObject getNode_Out();
	op EObject getArc();
	op EObject getArc_Source();
	op EObject getArc_Target();
	op EObject getTransition();
	op EObject getPlace();
	op EObject getPlace_Tokens();
	op EObject getToken();
	op EObject getPetrinetFactory();
	op void createPackageContents();
	op void initializePackageContents();
	attr boolean isInited;
	attr boolean isCreated;
	attr boolean isInitialized;
}

@Override
@Override
@Override
@Override
@Override
@Override
@Override
class ArcImpl {
	op EObject eStaticClass();
	op EObject getSource();
	op EObject basicGetSource();
	op void setSource(EObject newSource);
	op EObject getTarget();
	op EObject basicGetTarget();
	op EObject basicSetTarget(EObject newTarget, EObject msgs);
	op void setTarget(EObject newTarget);
	op EObject eInverseAdd(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eInverseRemove(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
}

@Override
@Override
@Override
@SuppressWarnings
@Override
@Override
@Override
class PlaceImpl {
	op EObject eStaticClass();
	op EObject getTokens();
	op EObject eInverseRemove(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
}

@Override
@SuppressWarnings
@Override
@Override
@Override
@SuppressWarnings
@Override
@Override
@Override
@Override
class NodeImpl {
	op EObject eStaticClass();
	op EObject getName();
	op void setName(String newName);
	op EObject getIn();
	op EObject getOut();
	op EObject eInverseAdd(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eInverseRemove(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr String NAME_EDEFAULT;
	attr String name;
}

@Override
class TokenImpl {
	op EObject eStaticClass();
}

@Override
@Deprecated
class PetrinetFactoryImpl {
	op EObject init();
	op EObject create(EObject eClass);
	op EObject createPetrinet();
	op EObject createArc();
	op EObject createTransition();
	op EObject createPlace();
	op EObject createToken();
	op EObject getPetrinetPackage();
	op EObject getPackage();
}

@Override
class TransitionImpl extends NodeImpl {
	op EObject eStaticClass();
}

@Override
@Override
@Override
@SuppressWarnings
@Override
@Override
@Override
@Override
class PetrinetImpl {
	op EObject eStaticClass();
	op EObject getName();
	op void setName(String newName);
	op EObject getNodes();
	op EObject getArcs();
	op EObject eInverseRemove(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr String NAME_EDEFAULT;
	attr String name;
}

abstract interface Transition {
}

abstract interface Node {
	op EObject getName();
	op void setName(String value);
	op EObject getIn();
	op EObject getOut();
}

@Override
@Override
@Override
class PetrinetSwitch {
	op EObject isSwitchFor(EObject ePackage);
	op EObject doSwitch(EObject classifierID, EObject theEObject);
	op EObject casePetrinet(EObject object);
	op EObject caseNode(EObject object);
	op EObject caseArc(EObject object);
	op EObject caseTransition(EObject object);
	op EObject casePlace(EObject object);
	op EObject caseToken(EObject object);
	op EObject defaultCase(EObject object);
}

@Override
@Override
class PetrinetAdapterFactory {
	op EObject isFactoryForType(EObject object);
	op EObject createAdapter(EObject target);
	op EObject createPetrinetAdapter();
	op EObject createNodeAdapter();
	op EObject createArcAdapter();
	op EObject createTransitionAdapter();
	op EObject createPlaceAdapter();
	op EObject createTokenAdapter();
	op EObject createEObjectAdapter();
}

abstract interface Place extends Node {
	op EObject getTokens();
}

abstract interface Arc {
	op EObject getSource();
	op void setSource(EObject value);
	op EObject getTarget();
	op void setTarget(EObject value);
}

abstract interface PetrinetFactory {
	op EObject createPetrinet();
	op EObject createArc();
	op EObject createTransition();
	op EObject createPlace();
	op EObject createToken();
	op EObject getPetrinetPackage();
}

abstract interface PetrinetPackage {
	op EObject getPetrinet();
	op EObject getPetrinet_Name();
	op EObject getPetrinet_Nodes();
	op EObject getPetrinet_Arcs();
	op EObject getNode();
	op EObject getNode_Name();
	op EObject getNode_In();
	op EObject getNode_Out();
	op EObject getArc();
	op EObject getArc_Source();
	op EObject getArc_Target();
	op EObject getTransition();
	op EObject getPlace();
	op EObject getPlace_Tokens();
	op EObject getToken();
	op EObject getPetrinetFactory();
}

abstract interface Literals {
}

abstract interface Petrinet {
	op EObject getName();
	op void setName(String value);
	op EObject getNodes();
	op EObject getArcs();
}

abstract interface Token {
}

