@namespace(uri="https://www.example.org/java", prefix="java")
package javaPackage;

@Override
@Deprecated
class MainFactoryImpl {
	op EObject init();
	op EObject create(EObject eClass);
	op EObject createM();
	op EObject getMainPackage();
	op EObject getPackage();
}

@Override
@Override
@Override
@Override
@Override
class MImpl {
	op EObject eStaticClass();
	op EObject getP();
	op EObject basicGetP();
	op void setP(EObject newP);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
}

class MainPackageImpl {
	op EObject init();
	op EObject getM();
	op EObject getM_P();
	op EObject getMainFactory();
	op void createPackageContents();
	op void initializePackageContents();
	attr boolean isInited;
	attr boolean isCreated;
	attr boolean isInitialized;
}

@Override
@Override
@Override
class MainSwitch {
	op EObject isSwitchFor(EObject ePackage);
	op EObject doSwitch(EObject classifierID, EObject theEObject);
	op EObject caseM(EObject object);
	op EObject defaultCase(EObject object);
}

@Override
@Override
class MainAdapterFactory {
	op EObject isFactoryForType(EObject object);
	op EObject createAdapter(EObject target);
	op EObject createMAdapter();
	op EObject createEObjectAdapter();
}

abstract interface MainFactory {
	op EObject createM();
	op EObject getMainPackage();
}

abstract interface MainPackage {
	op EObject getM();
	op EObject getM_P();
	op EObject getMainFactory();
}

abstract interface Literals {
}

@Override
@Deprecated
class SubsubFactoryImpl {
	op EObject init();
	op EObject create(EObject eClass);
	op EObject createSSC();
	op EObject getSubsubPackage();
	op EObject getPackage();
}

class SubsubPackageImpl {
	op EObject init();
	op EObject getSSC();
	op EObject getSubsubFactory();
	op void createPackageContents();
	op void initializePackageContents();
	attr boolean isInited;
	attr boolean isCreated;
	attr boolean isInitialized;
}

@Override
class SSCImpl {
	op EObject eStaticClass();
}

@Override
@Override
@Override
class SubsubSwitch {
	op EObject isSwitchFor(EObject ePackage);
	op EObject doSwitch(EObject classifierID, EObject theEObject);
	op EObject caseSSC(EObject object);
	op EObject defaultCase(EObject object);
}

@Override
@Override
class SubsubAdapterFactory {
	op EObject isFactoryForType(EObject object);
	op EObject createAdapter(EObject target);
	op EObject createSSCAdapter();
	op EObject createEObjectAdapter();
}

abstract interface SSC {
}

abstract interface SubsubPackage {
	op EObject getSSC();
	op EObject getSubsubFactory();
}

abstract interface Literals {
}

abstract interface SubsubFactory {
	op EObject createSSC();
	op EObject getSubsubPackage();
}

abstract interface M {
	op EObject getP();
	op void setP(EObject value);
}

