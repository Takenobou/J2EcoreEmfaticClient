@namespace(uri="https://www.example.org/java", prefix="java")
package javaPackage;

@Override
@SuppressWarnings
@Override
@Override
@Override
@SuppressWarnings
@Override
@Override
@Override
@Override
class RelationalSchemaImpl {
	op EObject eStaticClass();
	op EObject getName();
	op void setName(String newName);
	op EObject getTables();
	op EObject eInverseAdd(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eInverseRemove(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr String NAME_EDEFAULT;
	attr String name;
}

class RelationalMetaModelPackageImpl {
	op EObject init();
	op EObject getRelationalSchema();
	op EObject getRelationalSchema_Name();
	op EObject getRelationalSchema_Tables();
	op EObject getRelationalTable();
	op EObject getRelationalTable_Schema();
	op EObject getRelationalTable_Name();
	op EObject getRelationalTable_ForeignKeys();
	op EObject getRelationalTable_ReferencedBy();
	op EObject getRelationalForeignKey();
	op EObject getRelationalForeignKey_Name();
	op EObject getRelationalForeignKey_OwnedByTable();
	op EObject getRelationalForeignKey_ReferencedTable();
	op EObject getRelationalMetaModelFactory();
	op void createPackageContents();
	op void initializePackageContents();
	op void createGmfAnnotations();
	op void createGmf_1Annotations();
	op void createGmf_2Annotations();
	op void createGmf_3Annotations();
	op void createGmf_4Annotations();
	attr boolean isInited;
	attr boolean isCreated;
	attr boolean isInitialized;
}

@Override
@Override
@Override
@Override
@Override
@Override
@Override
@Override
@Override
class RelationalForeignKeyImpl {
	op EObject eStaticClass();
	op EObject getName();
	op void setName(String newName);
	op EObject getOwnedByTable();
	op EObject basicSetOwnedByTable(EObject newOwnedByTable, EObject msgs);
	op void setOwnedByTable(EObject newOwnedByTable);
	op EObject getReferencedTable();
	op EObject basicGetReferencedTable();
	op EObject basicSetReferencedTable(EObject newReferencedTable, EObject msgs);
	op void setReferencedTable(EObject newReferencedTable);
	op EObject eInverseAdd(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eInverseRemove(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eBasicRemoveFromContainerFeature(EObject msgs);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr String NAME_EDEFAULT;
	attr String name;
}

@Override
@Deprecated
class RelationalMetaModelFactoryImpl {
	op EObject init();
	op EObject create(EObject eClass);
	op EObject createRelationalSchema();
	op EObject createRelationalTable();
	op EObject createRelationalForeignKey();
	op EObject getRelationalMetaModelPackage();
	op EObject getPackage();
}

@Override
@SuppressWarnings
@Override
@Override
@Override
@Override
@SuppressWarnings
@Override
@Override
@Override
@Override
class RelationalTableImpl {
	op EObject eStaticClass();
	op EObject getSchema();
	op EObject basicSetSchema(EObject newSchema, EObject msgs);
	op void setSchema(EObject newSchema);
	op EObject getName();
	op void setName(String newName);
	op EObject getForeignKeys();
	op EObject getReferencedBy();
	op EObject eInverseAdd(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eInverseRemove(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eBasicRemoveFromContainerFeature(EObject msgs);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr String NAME_EDEFAULT;
	attr String name;
}

@Override
@Override
class RelationalMetaModelAdapterFactory {
	op EObject isFactoryForType(EObject object);
	op EObject createAdapter(EObject target);
	op EObject createRelationalSchemaAdapter();
	op EObject createRelationalTableAdapter();
	op EObject createRelationalForeignKeyAdapter();
	op EObject createEObjectAdapter();
}

@Override
@Override
@Override
class RelationalMetaModelSwitch {
	op EObject isSwitchFor(EObject ePackage);
	op EObject doSwitch(EObject classifierID, EObject theEObject);
	op EObject caseRelationalSchema(EObject object);
	op EObject caseRelationalTable(EObject object);
	op EObject caseRelationalForeignKey(EObject object);
	op EObject defaultCase(EObject object);
}

abstract interface RelationalMetaModelPackage {
	op EObject getRelationalSchema();
	op EObject getRelationalSchema_Name();
	op EObject getRelationalSchema_Tables();
	op EObject getRelationalTable();
	op EObject getRelationalTable_Schema();
	op EObject getRelationalTable_Name();
	op EObject getRelationalTable_ForeignKeys();
	op EObject getRelationalTable_ReferencedBy();
	op EObject getRelationalForeignKey();
	op EObject getRelationalForeignKey_Name();
	op EObject getRelationalForeignKey_OwnedByTable();
	op EObject getRelationalForeignKey_ReferencedTable();
	op EObject getRelationalMetaModelFactory();
}

abstract interface Literals {
}

abstract interface RelationalMetaModelFactory {
	op EObject createRelationalSchema();
	op EObject createRelationalTable();
	op EObject createRelationalForeignKey();
	op EObject getRelationalMetaModelPackage();
}

abstract interface RelationalForeignKey {
	op EObject getName();
	op void setName(String value);
	op EObject getOwnedByTable();
	op void setOwnedByTable(EObject value);
	op EObject getReferencedTable();
	op void setReferencedTable(EObject value);
}

abstract interface RelationalSchema {
	op EObject getName();
	op void setName(String value);
	op EObject getTables();
}

abstract interface RelationalTable {
	op EObject getSchema();
	op void setSchema(EObject value);
	op EObject getName();
	op void setName(String value);
	op EObject getForeignKeys();
	op EObject getReferencedBy();
}

