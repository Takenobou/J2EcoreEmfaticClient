@namespace(uri="https://www.example.org/java", prefix="java")
package javaPackage;

abstract interface PtnetLoLAPackage {
	op EObject getPlace();
	op EObject getPlace_Token();
	op EObject getPlace_FinalMarking();
	op EObject getPtNet();
	op EObject getPtNet_Places();
	op EObject getPtNet_Transitions();
	op EObject getPtNet_InitialMarking();
	op EObject getPtNet_Annotation();
	op EObject getPtNet_Arcs();
	op EObject getPtNet_FinalMarking();
	op EObject getTransition();
	op EObject getNode();
	op EObject getNode_Name();
	op EObject getNode_Annotation();
	op EObject getNode_Incoming();
	op EObject getNode_Outgoing();
	op EObject getNode_Type();
	op EObject getMarking();
	op EObject getMarking_Places();
	op EObject getPlaceReference();
	op EObject getPlaceReference_Place();
	op EObject getRefMarkedPlace();
	op EObject getRefMarkedPlace_Token();
	op EObject getAnnotation();
	op EObject getAnnotation_Text();
	op EObject getArc();
	op EObject getArc_Source();
	op EObject getArc_Target();
	op EObject getArc_Weight();
	op EObject getArcToPlace();
	op EObject getArcToTransition();
	op EObject getTransitionExt();
	op EObject getTransitionExt_Probability();
	op EObject getTransitionExt_MinTime();
	op EObject getTransitionExt_Cost();
	op EObject getTransitionExt_MaxTime();
	op EObject getTransitionExt_Confidentiality();
	op EObject getPlaceExt();
	op EObject getPlaceExt_Probability();
	op EObject getPlaceExt_IsStart();
	op EObject getArcToPlaceExt();
	op EObject getArcToPlaceExt_Probability();
	op EObject getArcToTransitionExt();
	op EObject getArcToTransitionExt_Probability();
	op EObject getNodeType();
	op EObject getConfidentiality();
	op EObject getPtnetLoLAFactory();
}

abstract interface Literals {
}

abstract interface PtnetLoLAFactory {
	op EObject createPlace();
	op EObject createPtNet();
	op EObject createTransition();
	op EObject createNode();
	op EObject createMarking();
	op EObject createPlaceReference();
	op EObject createRefMarkedPlace();
	op EObject createAnnotation();
	op EObject createArc();
	op EObject createArcToPlace();
	op EObject createArcToTransition();
	op EObject createTransitionExt();
	op EObject createPlaceExt();
	op EObject createArcToPlaceExt();
	op EObject createArcToTransitionExt();
	op EObject getPtnetLoLAPackage();
}

@Override
@Override
@Override
@SuppressWarnings
@Override
@Override
@Override
class PtNetImpl {
	op EObject eStaticClass();
	op EObject getPlaces();
	op EObject getTransitions();
	op EObject getInitialMarking();
	op EObject basicSetInitialMarking(EObject newInitialMarking, EObject msgs);
	op void setInitialMarking(EObject newInitialMarking);
	op EObject getAnnotation();
	op EObject basicSetAnnotation(EObject newAnnotation, EObject msgs);
	op void setAnnotation(EObject newAnnotation);
	op EObject getArcs();
	op EObject getFinalMarking();
	op EObject basicSetFinalMarking(EObject newFinalMarking, EObject msgs);
	op void setFinalMarking(EObject newFinalMarking);
	op EObject eInverseRemove(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
}

@Override
@Override
@Override
@Override
@Override
@Override
class AnnotationImpl {
	op EObject eStaticClass();
	op EObject getText();
	op void setText(String newText);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr String TEXT_EDEFAULT;
	attr String text;
}

class PtnetLoLAPackageImpl extends PtnetLoLAPackage {
	op EObject init();
	op EObject getPlace();
	op EObject getPlace_Token();
	op EObject getPlace_FinalMarking();
	op EObject getPtNet();
	op EObject getPtNet_Places();
	op EObject getPtNet_Transitions();
	op EObject getPtNet_InitialMarking();
	op EObject getPtNet_Annotation();
	op EObject getPtNet_Arcs();
	op EObject getPtNet_FinalMarking();
	op EObject getTransition();
	op EObject getNode();
	op EObject getNode_Name();
	op EObject getNode_Annotation();
	op EObject getNode_Incoming();
	op EObject getNode_Outgoing();
	op EObject getNode_Type();
	op EObject getMarking();
	op EObject getMarking_Places();
	op EObject getPlaceReference();
	op EObject getPlaceReference_Place();
	op EObject getRefMarkedPlace();
	op EObject getRefMarkedPlace_Token();
	op EObject getAnnotation();
	op EObject getAnnotation_Text();
	op EObject getArc();
	op EObject getArc_Source();
	op EObject getArc_Target();
	op EObject getArc_Weight();
	op EObject getArcToPlace();
	op EObject getArcToTransition();
	op EObject getTransitionExt();
	op EObject getTransitionExt_Probability();
	op EObject getTransitionExt_MinTime();
	op EObject getTransitionExt_Cost();
	op EObject getTransitionExt_MaxTime();
	op EObject getTransitionExt_Confidentiality();
	op EObject getPlaceExt();
	op EObject getPlaceExt_Probability();
	op EObject getPlaceExt_IsStart();
	op EObject getArcToPlaceExt();
	op EObject getArcToPlaceExt_Probability();
	op EObject getArcToTransitionExt();
	op EObject getArcToTransitionExt_Probability();
	op EObject getNodeType();
	op EObject getConfidentiality();
	op EObject getPtnetLoLAFactory();
	op void createPackageContents();
	op void initializePackageContents();
	attr boolean isInited;
	attr boolean isCreated;
	attr boolean isInitialized;
}

@Override
@Override
@Override
@Override
@Override
@Override
@Override
@Override
class ArcImpl {
	op EObject eStaticClass();
	op EObject getSource();
	op EObject basicGetSource();
	op EObject basicSetSource(EObject newSource, EObject msgs);
	op void setSource(EObject newSource);
	op EObject getTarget();
	op EObject basicGetTarget();
	op EObject basicSetTarget(EObject newTarget, EObject msgs);
	op void setTarget(EObject newTarget);
	op EObject getWeight();
	op void setWeight(EObject newWeight);
	op EObject eInverseAdd(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eInverseRemove(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr int WEIGHT_EDEFAULT;
	attr int weight;
}

@Override
@Override
@Override
@Override
@Override
@Override
class RefMarkedPlaceImpl {
	op EObject eStaticClass();
	op EObject getToken();
	op void setToken(EObject newToken);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr int TOKEN_EDEFAULT;
	attr int token;
}

@Override
@Override
@Override
@Override
@Override
@Override
class PlaceExtImpl {
	op EObject eStaticClass();
	op EObject getProbability();
	op void setProbability(EObject newProbability);
	op EObject isIsStart();
	op void setIsStart(EObject newIsStart);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr double PROBABILITY_EDEFAULT;
	attr double probability;
	attr boolean IS_START_EDEFAULT;
	attr boolean isStart;
}

@Override
@Override
@Override
@Override
@Override
@Override
class PlaceImpl {
	op EObject eStaticClass();
	op EObject getToken();
	op void setToken(EObject newToken);
	op EObject getFinalMarking();
	op void setFinalMarking(EObject newFinalMarking);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr int TOKEN_EDEFAULT;
	attr int token;
	attr int FINAL_MARKING_EDEFAULT;
}

@Override
@SuppressWarnings
@Override
@Override
@Override
@Override
@Override
@Override
@Override
class NodeImpl {
	op EObject eStaticClass();
	op EObject getName();
	op void setName(String newName);
	op EObject getAnnotation();
	op EObject basicSetAnnotation(EObject newAnnotation, EObject msgs);
	op void setAnnotation(EObject newAnnotation);
	op EObject getIncoming();
	op EObject getOutgoing();
	op EObject getType();
	op void setType(EObject newType);
	op EObject eInverseAdd(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eInverseRemove(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr String NAME_EDEFAULT;
	attr String name;
}

@Override
@Override
@Override
@Override
@Override
@Override
class ArcToPlaceExtImpl {
	op EObject eStaticClass();
	op EObject getProbability();
	op void setProbability(EObject newProbability);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr double PROBABILITY_EDEFAULT;
	attr double probability;
}

@Override
class ArcToPlaceImpl extends ArcImpl {
	op EObject eStaticClass();
}

@Override
@Override
@Override
@SuppressWarnings
@Override
@Override
@Override
class MarkingImpl {
	op EObject eStaticClass();
	op EObject getPlaces();
	op EObject eInverseRemove(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
}

@Override
@Override
@Override
@Override
@Override
class PlaceReferenceImpl {
	op EObject eStaticClass();
	op EObject getPlace();
	op EObject basicGetPlace();
	op void setPlace(EObject newPlace);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
}

@Override
@Override
@Override
@Override
@Override
@Override
class ArcToTransitionExtImpl {
	op EObject eStaticClass();
	op EObject getProbability();
	op void setProbability(EObject newProbability);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr double PROBABILITY_EDEFAULT;
	attr double probability;
}

@Override
@Override
@Override
@Deprecated
class PtnetLoLAFactoryImpl extends PtnetLoLAFactory {
	op EObject init();
	op EObject create(EObject eClass);
	op EObject createFromString(EObject eDataType, String initialValue);
	op EObject convertToString(EObject eDataType, EObject instanceValue);
	op EObject createPlace();
	op EObject createPtNet();
	op EObject createTransition();
	op EObject createNode();
	op EObject createMarking();
	op EObject createPlaceReference();
	op EObject createRefMarkedPlace();
	op EObject createAnnotation();
	op EObject createArc();
	op EObject createArcToPlace();
	op EObject createArcToTransition();
	op EObject createTransitionExt();
	op EObject createPlaceExt();
	op EObject createArcToPlaceExt();
	op EObject createArcToTransitionExt();
	op EObject createNodeTypeFromString(EObject eDataType, String initialValue);
	op EObject convertNodeTypeToString(EObject eDataType, EObject instanceValue);
	op EObject createConfidentialityFromString(EObject eDataType, String initialValue);
	op EObject convertConfidentialityToString(EObject eDataType, EObject instanceValue);
	op EObject getPtnetLoLAPackage();
	op EObject getPackage();
}

@Override
class ArcToTransitionImpl extends ArcImpl {
	op EObject eStaticClass();
}

@Override
class TransitionImpl extends NodeImpl {
	op EObject eStaticClass();
}

@Override
@Override
@Override
@Override
@Override
@Override
class TransitionExtImpl extends TransitionImpl {
	op EObject eStaticClass();
	op EObject getProbability();
	op void setProbability(EObject newProbability);
	op EObject getMinTime();
	op void setMinTime(EObject newMinTime);
	op EObject getCost();
	op void setCost(EObject newCost);
	op EObject getMaxTime();
	op void setMaxTime(EObject newMaxTime);
	op EObject getConfidentiality();
	op void setConfidentiality(EObject newConfidentiality);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr double PROBABILITY_EDEFAULT;
	attr double probability;
	attr int MIN_TIME_EDEFAULT;
	attr int minTime;
	attr double COST_EDEFAULT;
	attr double cost;
	attr int MAX_TIME_EDEFAULT;
	attr int maxTime;
}

abstract interface Transition {
}

abstract interface ArcToPlaceExt {
	op EObject getProbability();
	op void setProbability(EObject value);
}

abstract interface TransitionExt extends Transition {
	op EObject getProbability();
	op void setProbability(EObject value);
	op EObject getMinTime();
	op void setMinTime(EObject value);
	op EObject getCost();
	op void setCost(EObject value);
	op EObject getMaxTime();
	op void setMaxTime(EObject value);
	op EObject getConfidentiality();
	op void setConfidentiality(EObject value);
}

abstract interface Node {
	op EObject getName();
	op void setName(String value);
	op EObject getAnnotation();
	op void setAnnotation(EObject value);
	op EObject getIncoming();
	op EObject getOutgoing();
	op EObject getType();
	op void setType(EObject value);
}

abstract interface ArcToTransition {
}

@Override
@Override
class PtnetLoLAAdapterFactory {
	op EObject isFactoryForType(EObject object);
	op EObject createAdapter(EObject target);
	op EObject createPlaceAdapter();
	op EObject createPtNetAdapter();
	op EObject createTransitionAdapter();
	op EObject createNodeAdapter();
	op EObject createMarkingAdapter();
	op EObject createPlaceReferenceAdapter();
	op EObject createRefMarkedPlaceAdapter();
	op EObject createAnnotationAdapter();
	op EObject createArcAdapter();
	op EObject createArcToPlaceAdapter();
	op EObject createArcToTransitionAdapter();
	op EObject createTransitionExtAdapter();
	op EObject createPlaceExtAdapter();
	op EObject createArcToPlaceExtAdapter();
	op EObject createArcToTransitionExtAdapter();
	op EObject createEObjectAdapter();
	val PtnetLoLAPackage[*] modelPackage;
}

@Override
@Override
@Override
class PtnetLoLASwitch {
	op EObject isSwitchFor(EObject ePackage);
	op EObject doSwitch(EObject classifierID, EObject theEObject);
	op EObject casePlace(EObject object);
	op EObject casePtNet(EObject object);
	op EObject caseTransition(EObject object);
	op EObject caseNode(EObject object);
	op EObject caseMarking(EObject object);
	op EObject casePlaceReference(EObject object);
	op EObject caseRefMarkedPlace(EObject object);
	op EObject caseAnnotation(EObject object);
	op EObject caseArc(EObject object);
	op EObject caseArcToPlace(EObject object);
	op EObject caseArcToTransition(EObject object);
	op EObject caseTransitionExt(EObject object);
	op EObject casePlaceExt(EObject object);
	op EObject caseArcToPlaceExt(EObject object);
	op EObject caseArcToTransitionExt(EObject object);
	op EObject defaultCase(EObject object);
	val PtnetLoLAPackage[*] modelPackage;
}

abstract interface Marking {
	op EObject getPlaces();
}

abstract interface Place extends Node {
	op EObject getToken();
	op void setToken(EObject value);
	op EObject getFinalMarking();
	op void setFinalMarking(EObject value);
}

abstract interface PlaceReference {
	op EObject getPlace();
	op void setPlace(EObject value);
}

abstract interface ArcToTransitionExt extends ArcToTransition {
	op EObject getProbability();
	op void setProbability(EObject value);
}

abstract interface PtNet {
	op EObject getPlaces();
	op EObject getTransitions();
	op EObject getInitialMarking();
	op void setInitialMarking(EObject value);
	op EObject getAnnotation();
	op void setAnnotation(EObject value);
	op EObject getArcs();
	op EObject getFinalMarking();
	op void setFinalMarking(EObject value);
}

abstract interface Arc {
	op EObject getSource();
	op void setSource(EObject value);
	op EObject getTarget();
	op void setTarget(EObject value);
	op EObject getWeight();
	op void setWeight(EObject value);
}

abstract interface ArcToPlace extends Arc {
}

enum Confidentiality {
	UNKNOWN = 0;
	LOW = 1;
	HIGH = 2;
}

abstract interface PlaceExt extends Place {
	op EObject getProbability();
	op void setProbability(EObject value);
	op EObject isIsStart();
	op void setIsStart(EObject value);
}

enum NodeType {
	INTERNAL = 0;
	INPUT = 1;
	OUTPUT = 2;
	INOUT = 3;
}

abstract interface RefMarkedPlace extends PlaceReference {
	op EObject getToken();
	op void setToken(EObject value);
}

abstract interface Annotation {
	op EObject getText();
	op void setText(String value);
}

