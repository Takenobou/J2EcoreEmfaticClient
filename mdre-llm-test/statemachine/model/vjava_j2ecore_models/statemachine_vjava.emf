@namespace(uri="https://www.example.org/java", prefix="java")
package javaPackage;

@Override
@Override
@Override
@Override
@Override
@Override
class Transition {
	op EObject eStaticClass();
	op EObject getLabel();
	op void setLabel(String newLabel);
	op EObject getSourceLabel();
	op void setSourceLabel(String newSourceLabel);
	op EObject getTargetLabel();
	op void setTargetLabel(String newTargetLabel);
	op EObject getSource();
	op EObject basicGetSource();
	op void setSource(EObject newSource);
	op EObject getTarget();
	op EObject basicGetTarget();
	op void setTarget(EObject newTarget);
	op EObject getGuardLabel();
	op void setGuardLabel(String newGuardLabel);
	op EObject getActionLabel();
	op void setActionLabel(String newActionLabel);
	op EObject getGuardExpression();
	op void setGuardExpression(String newGuardExpression);
	op EObject getActionStatement();
	op void setActionStatement(String newActionStatement);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr String LABEL_EDEFAULT;
	attr String label;
	attr String SOURCE_LABEL_EDEFAULT;
	attr String sourceLabel;
	attr String TARGET_LABEL_EDEFAULT;
	attr String targetLabel;
	attr String GUARD_LABEL_EDEFAULT;
	attr String guardLabel;
	attr String ACTION_LABEL_EDEFAULT;
	attr String actionLabel;
	attr String GUARD_EXPRESSION_EDEFAULT;
	attr String guardExpression;
	attr String ACTION_STATEMENT_EDEFAULT;
	attr String actionStatement;
}

@Override
@Override
class StatemachineAdapterFactory {
	op EObject isFactoryForType(EObject object);
	op EObject createAdapter(EObject target);
	op EObject createStateMachineAdapter();
	op EObject createDeclarationAdapter();
	op EObject createTransitionAdapter();
	op EObject createStateAdapter();
	op EObject createActionAdapter();
	op EObject createStateMachineVariableAdapter();
	op EObject createNormalStateAdapter();
	op EObject createInitialStateAdapter();
	op EObject createFinalStateAdapter();
	op EObject createEObjectAdapter();
}

@Override
@Override
@Override
class StatemachineSwitch {
	op EObject isSwitchFor(EObject ePackage);
	op EObject doSwitch(EObject classifierID, EObject theEObject);
	op EObject caseStateMachine(EObject object);
	op EObject caseDeclaration(EObject object);
	op EObject caseTransition(EObject object);
	op EObject caseState(EObject object);
	op EObject caseAction(EObject object);
	op EObject caseStateMachineVariable(EObject object);
	op EObject caseNormalState(EObject object);
	op EObject caseInitialState(EObject object);
	op EObject caseFinalState(EObject object);
	op EObject defaultCase(EObject object);
}

@Override
@Override
@Override
@Override
@Override
@Override
class StateMachineVariable {
	op EObject eStaticClass();
	op EObject getType();
	op void setType(String newType);
	op EObject getName();
	op void setName(String newName);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr String TYPE_EDEFAULT;
	attr String type;
	attr String NAME_EDEFAULT;
	attr String name;
}

@Override
class FinalState {
	op EObject eStaticClass();
}

@Override
@Override
@Override
@SuppressWarnings
@Override
@Override
@Override
class StateMachine {
	op EObject eStaticClass();
	op EObject getDeclarations();
	op EObject getMachineVariables();
	op void printReachable();
	op EObject eInverseRemove(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
}

@Override
class Declaration {
	op EObject eStaticClass();
	op void printReachable();
}

@Override
@Deprecated
class StatemachineFactory {
	op EObject init();
	op EObject create(EObject eClass);
	op EObject createStateMachine();
	op EObject createTransition();
	op EObject createAction();
	op EObject createStateMachineVariable();
	op EObject createNormalState();
	op EObject createInitialState();
	op EObject createFinalState();
	op EObject getStatemachinePackage();
	op EObject getPackage();
	val StatemachineFactory[*]#INSTANCE eINSTANCE;
	val StatemachineFactory[*]#eINSTANCE INSTANCE;
}

class StatemachinePackage {
	op EObject init();
	op EObject getStateMachine();
	op EObject getStateMachine_Declarations();
	op EObject getStateMachine_MachineVariables();
	op EObject getDeclaration();
	op EObject getTransition();
	op EObject getTransition_Label();
	op EObject getTransition_SourceLabel();
	op EObject getTransition_TargetLabel();
	op EObject getTransition_Source();
	op EObject getTransition_Target();
	op EObject getTransition_GuardLabel();
	op EObject getTransition_ActionLabel();
	op EObject getTransition_GuardExpression();
	op EObject getTransition_ActionStatement();
	op EObject getState();
	op EObject getState_Label();
	op EObject getState_Successors();
	op EObject getState_Reachable();
	op EObject getState_Id();
	op EObject getAction();
	op EObject getAction_ActionLabel();
	op EObject getAction_ActionStatement();
	op EObject getStateMachineVariable();
	op EObject getStateMachineVariable_Type();
	op EObject getStateMachineVariable_Name();
	op EObject getNormalState();
	op EObject getNormalState_Entry();
	op EObject getInitialState();
	op EObject getFinalState();
	op EObject getStatemachineFactory();
	op void createPackageContents();
	op void initializePackageContents();
	op void createDiagraphAnnotations();
	op void createGmfAnnotations();
	op void createGmf_1Annotations();
	attr String eNAME;
	attr String eNS_URI;
	attr String eNS_PREFIX;
	attr int STATE_MACHINE;
	attr int STATE_MACHINE__DECLARATIONS;
	attr int STATE_MACHINE__MACHINE_VARIABLES;
	attr int STATE_MACHINE_FEATURE_COUNT;
	attr int DECLARATION;
	attr int DECLARATION_FEATURE_COUNT;
	attr int TRANSITION;
	attr int TRANSITION__LABEL;
	attr int TRANSITION__SOURCE_LABEL;
	attr int TRANSITION__TARGET_LABEL;
	attr int TRANSITION__SOURCE;
	attr int TRANSITION__TARGET;
	attr int TRANSITION__GUARD_LABEL;
	attr int TRANSITION__ACTION_LABEL;
	attr int TRANSITION__GUARD_EXPRESSION;
	attr int TRANSITION__ACTION_STATEMENT;
	attr int TRANSITION_FEATURE_COUNT;
	attr int STATE;
	attr int STATE__LABEL;
	attr int STATE__SUCCESSORS;
	attr int STATE__REACHABLE;
	attr int STATE__ID;
	attr int STATE_FEATURE_COUNT;
	attr int ACTION;
	attr int ACTION__ACTION_LABEL;
	attr int ACTION__ACTION_STATEMENT;
	attr int ACTION_FEATURE_COUNT;
	attr int STATE_MACHINE_VARIABLE;
	attr int STATE_MACHINE_VARIABLE__TYPE;
	attr int STATE_MACHINE_VARIABLE__NAME;
	attr int STATE_MACHINE_VARIABLE_FEATURE_COUNT;
	attr int NORMAL_STATE;
	attr int NORMAL_STATE__LABEL;
	attr int NORMAL_STATE__SUCCESSORS;
	attr int NORMAL_STATE__REACHABLE;
	attr int NORMAL_STATE__ID;
	attr int NORMAL_STATE__ENTRY;
	attr int NORMAL_STATE_FEATURE_COUNT;
	attr int INITIAL_STATE;
	attr int INITIAL_STATE__LABEL;
	attr int INITIAL_STATE__SUCCESSORS;
	attr int INITIAL_STATE__REACHABLE;
	attr int INITIAL_STATE__ID;
	attr int INITIAL_STATE_FEATURE_COUNT;
	attr int FINAL_STATE;
	attr int FINAL_STATE__LABEL;
	attr int FINAL_STATE__SUCCESSORS;
	attr int FINAL_STATE__REACHABLE;
	attr int FINAL_STATE__ID;
	attr int FINAL_STATE_FEATURE_COUNT;
	attr boolean isInited;
	attr boolean isCreated;
	attr boolean isInitialized;
	val StatemachinePackage[*] eINSTANCE;
}

abstract interface Literals {
}

@Override
class InitialState {
	op EObject eStaticClass();
}

@Override
@Override
@Override
@Override
@Override
@Override
class Action {
	op EObject eStaticClass();
	op EObject getActionLabel();
	op void setActionLabel(String newActionLabel);
	op EObject getActionStatement();
	op void setActionStatement(String newActionStatement);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr String ACTION_LABEL_EDEFAULT;
	attr String actionLabel;
	attr String ACTION_STATEMENT_EDEFAULT;
	attr String actionStatement;
}

@Override
@Override
@SuppressWarnings
@Override
@Override
@Override
@Override
class State extends Declaration {
	op EObject eStaticClass();
	op EObject getLabel();
	op void setLabel(String newLabel);
	op EObject getSuccessors();
	op EObject getReachable();
	op EObject getId();
	op void setId(EObject newId);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	op EObject toString();
	attr String LABEL_EDEFAULT;
	attr String label;
	attr int ID_EDEFAULT;
	attr int ~id;
}

@Override
@Override
@Override
@Override
@Override
@Override
class NormalState extends State {
	op EObject eStaticClass();
	op EObject getEntry();
	op EObject basicSetEntry(EObject newEntry, EObject msgs);
	op void setEntry(EObject newEntry);
	op EObject eInverseRemove(EObject otherEnd, EObject featureID, EObject msgs);
	op EObject eGet(EObject featureID, EObject ~resolve, EObject coreType);
	op void eSet(EObject featureID, EObject newValue);
	op void eUnset(EObject featureID);
	op EObject eIsSet(EObject featureID);
	val Action[*] entry;
}

